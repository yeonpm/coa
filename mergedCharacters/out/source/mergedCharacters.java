/* autogenerated by Processing revision 1293 on 2024-09-25 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class mergedCharacters extends PApplet {

float x1, y1, d1, vx1, vy1;
float x2, y2, d2, vx2, vy2;
float x3, y3, d3, vx3, vy3;
float x4, y4, d4, vx4, vy4;

public void setup() {
    /* size commented out by preprocessor */;
    x1 = 100; y1 = 100; d1 = 5; vx1 = 3; vy1 = 4;
    x2 = 200; y2 = 50; d2 = 10; vx2 = 6; vy2 = 5;
    x3 = 300; y3 = 150; d3 = 1; vx3 = 6; vy3 = 2;
    x4 = 400; y4 = 250; d4 = 200; vx4 = 2; vy4 = 7;
}

public void draw(){
    background(0xFFD8D8D8);

    x1 += vx1; y1 +=vy1; x2 += vx2; y2 +=vy2; x3 += vx3; y3 +=vy3; x4 += vx4; y4 +=vy4;
    if(x1<0 || x1>width) vx1 = -vx1;
    if(y1<0 || y1>height) vy1 = -vy1;
    if(x2 < 0 || x2 > width) vx2 = -vx2;
    if(y2 < 0 || y2 > height) vy2 = -vy2;
    if(x3 < 0 || x3 > width) vx3 = -vx3;
    if(y3 < 0 || y3 > height) vy3 = -vy3;
    if(x4 < 0 || x4 > width) vx4 = -vx4;
    if(y4 < 0 || y4 > height) vy4 = -vy4;

    blueKirby(x1, y1, d1);
    pinkyKirby(x2, y2, d2, 0xFFFFB7C5);
    gear(x3, y3, d3);
    maru(x4, y4, d4);
}
public void blueKirby(float x, float y, float d){ // x,y 위치, d 크기
  fill(46,58,110);
  arc(x-15*d,y+17.5f*d,20*d,5*d,0,2*PI); //left leg
  arc(x+15*d,y+17.5f*d,20*d,5*d,0,2*PI); //right leg
  fill(155,210,240);
  arc(x-18*d,y-7.5f*d,12*d,15*d,0,2*PI); //left arm
  arc(x+18*d,y-7.5f*d,12*d,15*d,0,2*PI); //right arm
  circle(x,y,40*d); //body
  fill(15,22,84);
  arc(x-5*d,y-9*d,5*d,11*d,0,2*PI); //left eye
  arc(x+5*d,y-9*d,5*d,11*d,0,2*PI); //right eye
  fill(200,30,60);
  triangle(x-3*d,y-2*d,x+3*d,y-2*d,x,y+3*d); //mouth
}
public void gear(float pos_x, float pos_y, float d3){
  noStroke();
  fill(100);
  
  //gear tooth and head
  rect(pos_x-25*d3, pos_y-120*d3, 50*d3, 240*d3);//gear tooth 1
  rect(pos_x-120*d3, pos_y-25*d3, 240*d3, 50*d3);//gear tooth 2
  
  pushMatrix();
  translate(pos_x, pos_y);
  rotate(PI/4);
  rect(-25*d3, -120*d3, 50*d3, 240*d3);//gear tooth 3
  rect(-120*d3, -25*d3, 240*d3, 50*d3);//gear tooth 4
  popMatrix();
  
  circle(pos_x, pos_y, 200*d3);//head
  
  //face
  stroke(0);
  strokeWeight(2*d3);
  fill(128);
  circle(pos_x, pos_y, 150*d3);//face

  //eye
  fill(50, 0, 0);
  circle(pos_x-30*d3, pos_y-25*d3, 35*d3);//left eye 1
  circle(pos_x+30*d3, pos_y-25*d3, 35*d3);//right eye 1
  noStroke();
  fill(255);
  circle(pos_x-25*d3, pos_y-28*d3, 10*d3);//left eye 2
  circle(pos_x+35*d3, pos_y-28*d3, 10*d3);// right eye 2
  
  //mouth
  fill(100, 0, 0);
  circle(pos_x, pos_y+30*d3, 30*d3);//mouth
  fill(200, 0, 0);
  ellipse(pos_x, pos_y+40*d3, 20*d3, 10*d3);//tongue
}
public void maru(float x, float y, float z){
  //모자(원)
  fill(0xFFFFBB00);
  circle(x, y, z);
  
  //모자(반원)
  fill(0xFFFFBB00);
  arc(x, y-z*0.375f, z*0.65f, z*0.475f, PI, 2*PI);
  
  //모자(타원)
  fill(0xFF47C83E);
  ellipse(x, y-z*0.675f, z*0.1f, z*0.25f);
  
  //얼굴(quad)
  fill(255);
  quad(x-z*0.3f,y+z*0.1f, x+z*0.3f,y+z*0.1f, x+z*0.2f,y+z*0.5f, x-z*0.2f,y+z*0.5f);
  
  //얼굴(arc)
  fill(255);
  arc(x, y+z*0.5f, z*0.4f, z*0.3f, 0, PI);
  
  //왼쪽 얼굴 무늬(arc)
  fill(0);
  arc(x-z*0.3f, y+z*0.1f, z*0.6f, z*0.6f, 0, 0.42f*PI);
  
  //오른쪽 얼굴 무늬(arc)
  fill(0);
  arc(x+z*0.3f, y+z*0.1f, z*0.45f, z*0.45f, 0.58f*PI ,PI);
  
  //왼쪽 눈동자(circle)
  fill(255);
  circle(x-z*0.15f, y+z*0.2f, z*0.09f);
  fill(0);
  circle(x-z*0.15f, y+z*0.2f, z*0.065f);
  
  //오른쪽 눈동자(circle)
  fill(255);
  circle(x+z*0.15f, y+z*0.2f, z*0.09f);
  fill(0);
  circle(x+z*0.15f, y+z*0.2f, z*0.065f);
  
  //코(ellipse)
  fill(0);
  ellipse(x, y+z*0.5f, z*0.125f, z*0.075f);
  
  //혀
  fill(0xFFCC3D3D);
  arc(x, y+z*0.6f, z*0.125f, z*0.25f, 0, PI);
}
public void pinkyKirby(float x, float y, float scale, int kirbyColor) {
  stroke(0, 0, 0);
  
  // feet
  fill(164, 38, 28);  // Red color
  ellipse(x - 6*scale, y + 8*scale, 8*scale, 5*scale);  // Left foot
  ellipse(x + 6*scale, y + 8*scale, 8*scale, 5*scale);  // Right foot
  
  // arms
  fill(kirbyColor);  
  ellipse(x - 10*scale, y + 2*scale, 6*scale, 5*scale);  // Left arm
  ellipse(x + 10*scale, y + 2*scale, 6*scale, 5*scale);  // Right arm
  
  // body
  fill(kirbyColor);  
  circle(x, y, 20*scale);
  
  noStroke();
  
  // eyes
  fill(70, 0, 0);  // Black color eyes
  ellipse(x - 2.5f*scale, y - 3*scale, 2.7f*scale, 6*scale);  // Left eye outline
  ellipse(x + 2.5f*scale, y - 3*scale, 2.7f*scale, 6*scale);  // Right eye outline
  
  fill(63, 72, 204);  // Blue color eyes
  ellipse(x - 2.5f*scale, y - 3*scale, 2.2f*scale, 4.5f*scale);  // Left eye
  ellipse(x + 2.5f*scale, y - 3*scale, 2.2f*scale, 4.5f*scale);  // Right eye
  
  fill(70, 0, 0);  // Dark color eyes
  ellipse(x - 2.5f*scale, y - 3.5f*scale, 2.3f*scale, 3.5f*scale);  // Left eye
  ellipse(x + 2.5f*scale, y - 3.5f*scale, 2.3f*scale, 3.5f*scale);  // Right eye
  
  fill(255);  // White color eyes
  ellipse(x - 2.5f*scale, y - 4.5f*scale, 1.4f*scale, 2.2f*scale);  // Left eye
  ellipse(x + 2.5f*scale, y - 4.5f*scale, 1.4f*scale, 2.2f*scale);  // Right eye
  
  // cheeks
  fill(255, 105, 180);  // Pinkish color
  ellipse(x - 6.5f*scale, y - 1.0f*scale, 3.0f*scale, 2.3f*scale);  // Left cheek
  ellipse(x + 6.5f*scale, y - 1.0f*scale, 3.0f*scale, 2.3f*scale);  // Right cheek
  
  // mouth
  fill(153, 0, 0);  
  arc(x, y + 2*scale, 4*scale, 3*scale, 0, PI);
  fill(255, 99, 71); 
  arc(x, y + 2.5f*scale, 3*scale, 2*scale, 0, PI);
}


  public void settings() { size(900, 900); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "mergedCharacters" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
